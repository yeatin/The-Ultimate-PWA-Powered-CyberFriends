{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","email","id","name","className","alt","src","CardList","robots","map","user","key","SearchBox","searchField","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflow","border","height","margin","children","CounterButton","updateCount","setState","state","count","nextProps","nextState","this","color","onClick","Component","Header","App","useState","setRobots","setSearchField","setCount","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","event","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.92c91561.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({email, id, name}) => {\n    return (\n        <div className= \"tc bg-light-red dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt=\"robot\" src={`https://robohash.org/${id}?size=200x200`} />\n            <div>\n            <h2>{name}</h2>\n            <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map((user) => {\n                    return (\n                        <Card\n                            key={user.id}\n                            id={user.id}\n                            name={user.name}\n                            email={user.email}\n                        />\n                    )\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n            <input \n            aria-label='search robots'\n            className=\"pa3 ba b--orange bg-lightest-blue tc mt2\"\n            type='search' \n            placeholder='search robots' \n            onChange= {searchChange}\n            />\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) =>{\n    return ( \n        <div style = {{\n        overflow: 'auto',\n        border: '5px solid red', \n        height: '33em',\n        margin: '10px'\n        }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass CounterButton extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 0\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        if (this.state.count !== nextProps.count)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    updateCount = () => {\r\n        this.setState(state => {\r\n            return { count: state.count +1}\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return <button\r\n            color={this.props.color}\r\n            onClick={this.updateCount}>\r\n            Count: {this.state.count}\r\n        </button>\r\n    }\r\n}\r\n\r\nexport default CounterButton;","import React, { Component } from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1 className='f1'>Cyberfriends</h1>\r\n                <CounterButton color='red' />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from \"react\";\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\nimport Header from '../components/Header';\n\nconst App = () => {\n    const [robots, setRobots] = useState([]);\n    const [searchField, setSearchField] = useState('');\n    const [count, setCount] = useState(0);\n\n    useEffect(() => {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => setRobots(users));\n    }, [])\n\n    const onSearchChange = (event) => {\n        setSearchField(event.target.value);\n    }\n\n    const filteredRobots = robots.filter((robot) => {\n        return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    });\n    return !robots.length ? (\n        <div>\n            <Header />\n            <h2 className='f1 tc'>Now loading...</h2>\n            <div>\n                <button onClick={() => setCount(count + 1)}>Click Me</button>\n            </div>\n        </div>\n    )\n        : (\n            <div className='tc'>\n                <Header />\n                <div>\n                    <button onClick={() => setCount(count + 1)}>Click Me</button>\n                </div>\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    <CardList robots={filteredRobots} />\n                </Scroll>\n            </div>\n        );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n   <App />\n  , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// registerServieWorker();\nserviceWorker.register();"],"sourceRoot":""}